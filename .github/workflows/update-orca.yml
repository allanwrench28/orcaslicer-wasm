name: update-orca

on:
  workflow_dispatch: {}

permissions:
  contents: write
  pull-requests: write

jobs:
  bump-orca:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Fetch latest OrcaSlicer release
        id: upstream_release
        uses: actions/github-script@v7
        with:
          script: |
            const release = await github.rest.repos.getLatestRelease({ owner: 'SoftFever', repo: 'OrcaSlicer' });
            return release.data.tag_name;

      - name: Determine currently pinned Orca tag
        id: current_orca
        run: |
          set -euo pipefail
          git -C orca fetch --tags --force
          CURRENT=$(git -C orca describe --tags --exact-match HEAD || true)
          if [ -z "$CURRENT" ]; then
            CURRENT=$(git -C orca rev-parse --short HEAD)
          fi
          echo "tag=$CURRENT" >> "$GITHUB_OUTPUT"

      - name: Check if update is required
        id: update_check
        run: |
          set -euo pipefail
          if [ "${{ steps.upstream_release.outputs.result }}" = "${{ steps.current_orca.outputs.tag }}" ]; then
            echo "needs_update=false" >> "$GITHUB_OUTPUT"
            echo "Orca submodule already at ${{ steps.current_orca.outputs.tag }}"
          else
            echo "needs_update=true" >> "$GITHUB_OUTPUT"
            echo "Detected new Orca release: ${{ steps.upstream_release.outputs.result }}"
          fi

      - name: Update Orca submodule to latest release
        if: steps.update_check.outputs.needs_update == 'true'
        env:
          TAG: ${{ steps.upstream_release.outputs.result }}
        run: |
          set -euo pipefail
          git -C orca fetch --tags --force
          git -C orca checkout --detach "refs/tags/${TAG}"
          git add orca

      - name: Apply WASM patch to Orca
        if: steps.update_check.outputs.needs_update == 'true'
        run: |
          set -euo pipefail
          git -C orca apply ../patches/orca-wasm.patch

      - name: Set up emscripten
        if: steps.update_check.outputs.needs_update == 'true'
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: latest
          actions-cache-folder: emsdk-cache

      - name: Cache Boost (wasm)
        if: steps.update_check.outputs.needs_update == 'true'
        id: cache-boost
        uses: actions/cache@v4
        with:
          path: deps/boost-wasm/install
          key: boost-wasm-${{ runner.os }}-${{ hashFiles('deps/boost-wasm/build_boost.sh') }}

      - name: Build Boost (if cache miss)
        if: steps.update_check.outputs.needs_update == 'true' && steps.cache-boost.outputs.cache-hit != 'true'
        run: bash deps/boost-wasm/build_boost.sh

      - name: Build WASM bundle for verification
        if: steps.update_check.outputs.needs_update == 'true'
        shell: pwsh
        run: ./build.ps1 -Clean -Jobs 4

      - name: Regenerate WASM patch and clean workspace
        if: steps.update_check.outputs.needs_update == 'true'
        env:
          TAG: ${{ steps.upstream_release.outputs.result }}
        run: |
          set -euo pipefail
          git -C orca diff --binary > ../patches/orca-wasm.patch
          git -C orca reset --hard HEAD
          python3 -c "import os, pathlib, re; tag = os.environ['TAG']; readme = pathlib.Path('README.md'); text = readme.read_text(); text = re.sub(r'(latest upstream stable tag \(currently `)v[0-9.]+(`\))', rf'\\1{tag}\\2', text); text = re.sub(r'(git checkout )v[0-9.]+', rf'\\1{tag}', text); readme.write_text(text)"
          rm -rf build-wasm
          rm -f web/public/wasm/slicer.js web/public/wasm/slicer.wasm
          git add README.md patches/orca-wasm.patch orca

      - name: Create pull request
        if: steps.update_check.outputs.needs_update == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          branch: bot/orca-${{ steps.upstream_release.outputs.result }}
          commit-message: "chore: update OrcaSlicer to ${{ steps.upstream_release.outputs.result }}"
          title: "chore: update OrcaSlicer to ${{ steps.upstream_release.outputs.result }}"
          body: |
            ## Summary
            - bump Orca submodule to `${{ steps.upstream_release.outputs.result }}`
            - refresh `patches/orca-wasm.patch`
            - verify WASM build via `./build.ps1 -Clean`

            :robot: This PR was generated automatically. If the build fails, inspect the workflow logs, push fixes to this branch, and re-run the workflow before merging.
          labels: |
            automation
            dependencies
